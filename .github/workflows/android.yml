# Copyright (c) 2020 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
name: build-rudp-binaries-android
on:
  push:
  workflow_dispatch:   # <-- Add this line to enable manual trigger

jobs:
  job:
    name: ${{ matrix.triplet }}-build-rudp-binaries-autocache
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - triplet: arm64-android
          - triplet: arm-android
          - triplet: x86-android

    env:
      buildDir: '${{ github.workspace }}/build/'

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      
      - name: Cache Build
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ matrix.triplet }}-${{ matrix.EVENT_MATRIX }}-v1

      # Install latest CMake.
      - uses: lukka/get-cmake@latest

      # Restore from cache the previously built ports. If a "cache miss" occurs, then vcpkg is bootstrapped. Since a the vcpkg.json is being used later on to install the packages when run-cmake runs, no packages are installed at this time and the input 'setupOnly:true' is mandatory.
      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@main
        id: runvcpkg
        with:
          # Just install vcpkg for now, do not install any ports in this step yet.
          setupOnly: true
          # Location of the vcpkg submodule in the Git repository.
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
          # compute its hash and append this to the computed cache's key.
          appendedCacheKey: ${{ hashFiles( '**/vcpkg_manifest/vcpkg.json' ) }}
          vcpkgTriplet: ${{ matrix.triplet }}
          # Ensure the vcpkg artifacts are cached, they are generated in the 'CMAKE_BINARY_DIR/vcpkg_installed' directory.
          additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed

      # Restore from cache the previously built ports. If cache-miss, download and build vcpkg (aka "bootstrap vcpkg").
      - name: Restore from cache and install vcpkg
        # Download and build vcpkg, without installing any port. If content is cached already, it is a no-op.
        uses: lukka/run-vcpkg@main
        with:
          setupOnly: true

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly. As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1

      # set up ndk 
      - name: Setup ndk and add the path variable for vcpkg
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r21d

      - name: install GameNetworkingSockets
        run: |
          echo %ANDROID_NDK_HOME%

          set ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}

          echo %ANDROID_NDK_HOME%

          @echo off
          (
            echo set(VCPKG_TARGET_ARCHITECTURE arm64^)
            echo set(VCPKG_CRT_LINKAGE static^)
            echo set(VCPKG_LIBRARY_LINKAGE static^)
            echo set(VCPKG_CMAKE_SYSTEM_NAME Android^)
          ) > %VCPKG_ROOT%/triplets/community/arm64-android.cmake

          (
            echo set(VCPKG_TARGET_ARCHITECTURE arm^)
            echo set(VCPKG_CRT_LINKAGE static^)
            echo set(VCPKG_LIBRARY_LINKAGE static^)
            echo set(VCPKG_CMAKE_SYSTEM_NAME Android^)
          ) > %VCPKG_ROOT%/triplets/community/arm-android.cmake

          (
            echo set(VCPKG_TARGET_ARCHITECTURE x86^)
            echo set(VCPKG_CRT_LINKAGE static^)
            echo set(VCPKG_LIBRARY_LINKAGE static^)
            echo set(VCPKG_CMAKE_SYSTEM_NAME Android^)
          ) > %VCPKG_ROOT%/triplets/community/x86-android.cmake

          (
            echo set(VCPKG_TARGET_ARCHITECTURE x64^)
            echo set(VCPKG_CRT_LINKAGE static^)
            echo set(VCPKG_LIBRARY_LINKAGE static^)
            echo set(VCPKG_CMAKE_SYSTEM_NAME Android^)
          ) > %VCPKG_ROOT%/triplets/community/x64-android.cmake

          cd ${{ github.workspace }}/GameNetworkingSockets

          git apply ../mobile_120.patch

          cd %VCPKG_ROOT%

          rmdir /S /Q installed 2> nul

          rmdir /S /Q buildtrees 2> nul

          %VCPKG_ROOT%/vcpkg install protobuf:x86-windows

          %VCPKG_ROOT%/vcpkg remove gamenetworkingsockets --triplet=${{ matrix.triplet }}

          %VCPKG_ROOT%/vcpkg --overlay-ports=${{ github.workspace }}/GameNetworkingSockets/vcpkg_ports install gamenetworkingsockets --triplet=${{ matrix.triplet }}
        shell: cmd

      # upload artifact if not failure
      - name: upload GameNetworkingSockets
        uses: actions/upload-artifact@v2
        if: "!failure()"
        with:
          name: ${{ matrix.triplet }}-${{ matrix.EVENT_MATRIX }}-build
          path: ${{ github.workspace }}/vcpkg/installed/${{ matrix.triplet }}/lib

      # upload artifact on failure
      - name: upload failure logs (if failure)
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ matrix.triplet }}-${{ matrix.EVENT_MATRIX }}-build-failure-logs
          path: |
            ${{ github.workspace }}/vcpkg/buildtrees/detect_compiler/*.log
            ${{ github.workspace }}/vcpkg/buildtrees/gamenetworkingsockets/*.log
            ${{ github.workspace }}/vcpkg/buildtrees/openssl/*.log
            ${{ github.workspace }}/vcpkg/buildtrees/libsodium/*.log
